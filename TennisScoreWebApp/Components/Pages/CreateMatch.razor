@page "/matches/create/{TournamentId:guid}"
@using TennisScoreWebApp.Infrastructure.ExternalServices.TennisScoreApi
@using TennisScoreWebApp.Components
@inject ITennisApiClient TennisApiClient
@inject NavigationManager Navigation

<h1 class="text-2xl font-bold mb-4">Create Match for @tournament?.Name</h1>

@if (tournament is null)
{
    <p>Loading...</p>
}
else
{
    <EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit" FormName="CreateMatchForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Tournament</label>
            <input class="form-control" value="@tournament.Name" disabled />
        </div>

        <!-- Match Date -->
        <div class="mb-3">
            <label class="form-label">Match Date</label>
            <input type="date" class="form-control" @bind="matchDate" />
        </div>

        <!-- Match Time -->
        <div class="mb-3">
            <label class="form-label">Match Time</label>
            <input type="timespan" class="form-control" @bind="matchTime" />
        </div>

        <PlayerAutocomplete Label="Player 1"
                            Placeholder="Search player 1..."
                            OnPlayerSelected="OnPlayer1Selected" />

        <PlayerAutocomplete Label="Player 2"
                            Placeholder="Search player 2..."
                            OnPlayerSelected="OnPlayer2Selected" />

        <ServingPlayerSelector Player1="player1Selected"
                               Player2="player2Selected"
                               SelectedServer="@match.ServingPlayer"
                               SelectedServerChanged="OnServingChanged" />

        <div class="mb-3">
            <button type="submit" class="btn btn-primary me-2">Create Match</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public Guid TournamentId { get; set; }

    private TournamentDto? tournament;
    private CreateMatchRequest match = new();
    private EditContext? editContext;

    private PlayerLightDto? player1Selected;
    private PlayerLightDto? player2Selected;
    private DateTime matchDate = DateTime.Today;
    private TimeSpan matchTime = DateTime.Now.TimeOfDay;

    protected override async Task OnInitializedAsync()
    {
        tournament = await TennisApiClient.TournamentsGETAsync(TournamentId);

        match.TournamentId = TournamentId;
        matchDate = DateTime.Today;
        matchTime = DateTime.Now.TimeOfDay;

        editContext = new EditContext(match);
    }

    private async Task OnPlayer1Selected(PlayerLightDto p)
    {
        player1Selected = p;
        match.Player1Id = p.Id;
        await Task.CompletedTask;
    }

    private async Task OnPlayer2Selected(PlayerLightDto p)
    {
        player2Selected = p;
        match.Player2Id = p.Id;
        await Task.CompletedTask;
    }

    private Task OnServingChanged(Guid serverId)
    {
        match.ServingPlayer = serverId;
        return Task.CompletedTask;
    }

    private async Task HandleValidSubmit()
    {
        match.MatchDate = matchDate.Date + matchTime;
        await TennisApiClient.MatchesPOSTAsync(match);
        Navigation.NavigateTo($"/tournaments/{TournamentId}");
    }

    private void Cancel()
    {
        Navigation.NavigateTo($"/tournaments/{TournamentId}");
    }
}
