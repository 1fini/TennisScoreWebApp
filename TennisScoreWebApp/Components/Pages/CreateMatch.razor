@page "/matches/create/{TournamentId:guid}"
@using TennisScoreWebApp.Infrastructure.ExternalServices.TennisScoreApi
@inject ITennisApiClient TennisApiClient
@inject NavigationManager Navigation

<h1 class="text-2xl font-bold mb-4">Create Match for @tournament?.Name</h1>

@if (tournament is null)
{
    <p>Loading...</p>
}
else
{
    <EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit" FormName="CreateMatchForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Tournament display -->
        <div class="mb-3">
            <label class="form-label">Tournament</label>
            <input class="form-control" value="@tournament.Name" disabled />
        </div>

        <!-- Player 1 -->
        <div class="mb-3">
            <label class="form-label">Player 1</label>
            <select class="form-select" @onchange="OnPlayer1Changed">
                <option value="">-- Select player 1 --</option>
                @foreach (var p in players)
                {
                    <option value="@p.Id.ToString()" selected="@(match.Player1Id == p.Id)">
                        @p.LastName
                    </option>
                }
            </select>
            <ValidationMessage For="@(() => match.Player1Id)" />
        </div>

        <!-- Player 2 -->
        <div class="mb-3">
            <label class="form-label">Player 2</label>
            <select class="form-select" @onchange="OnPlayer2Changed">
                <option value="">-- Select player 2 --</option>
                @foreach (var p in players)
                {
                    <option value="@p.Id.ToString()" selected="@(match.Player2Id == p.Id)">
                        @p.LastName
                    </option>
                }
            </select>
            <ValidationMessage For="@(() => match.Player2Id)" />
        </div>

        <!-- Serving player -->
        <div class="mb-3">
            <label class="form-label">Serving Player</label>
            <select class="form-select" @onchange="OnServingChanged" disabled="@(!isServingEnabled)">
                <option value="">-- Select server --</option>
                @if (player1Selected != null)
                {
                    <option value="@player1Selected.Id">@player1Selected.LastName</option>
                }
                @if (player2Selected != null)
                {
                    <option value="@player2Selected.Id">@player2Selected.LastName</option>
                }
            </select>
            <ValidationMessage For="@(() => match.ServingPlayer)" />
            <div class="form-text">Must be one of the previous selected players.</div>
        </div>

        <!-- Buttons -->
        <div class="mb-3">
            <button type="submit" class="btn btn-primary me-2">Create Match</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public Guid TournamentId { get; set; }

    private TournamentDto? tournament;
    private List<PlayerLightDto> players = new();
    private CreateMatchRequest match = new();
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;

    private PlayerLightDto? player1Selected => players.FirstOrDefault(p => p.Id == match.Player1Id);
    private PlayerLightDto? player2Selected => players.FirstOrDefault(p => p.Id == match.Player2Id);
    private bool isServingEnabled => match.Player1Id != Guid.Empty && match.Player2Id != Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        tournament = await TennisApiClient.TournamentsGETAsync(TournamentId);
        players = (await TennisApiClient.PlayersAllAsync()).ToList();
        match.TournamentId = TournamentId;

        editContext = new EditContext(match);
        messageStore = new ValidationMessageStore(editContext);
        editContext.OnFieldChanged += (sender, args) =>
        {
            messageStore.Clear();
            editContext.NotifyValidationStateChanged();
        };
    }

    private void OnPlayer1Changed(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var id))
            match.Player1Id = id;
        else
            match.Player1Id = Guid.Empty;

        editContext?.NotifyFieldChanged(new FieldIdentifier(match, nameof(match.Player1Id)));
    }

    private void OnPlayer2Changed(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var id))
            match.Player2Id = id;
        else
            match.Player2Id = Guid.Empty;

        editContext?.NotifyFieldChanged(new FieldIdentifier(match, nameof(match.Player2Id)));
    }

    private void OnServingChanged(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out var id))
            match.ServingPlayer = id;
        else
            match.ServingPlayer = Guid.Empty;

        editContext?.NotifyFieldChanged(new FieldIdentifier(match, nameof(match.ServingPlayer)));
    }

    private async Task HandleValidSubmit()
    {
        if (editContext == null || messageStore == null) return;

        messageStore.Clear();

        if (match.Player1Id == match.Player2Id || match.Player1Id == Guid.Empty || match.Player2Id == Guid.Empty)
        {
            if (match.Player1Id == Guid.Empty)
                messageStore.Add(editContext.Field(nameof(match.Player1Id)), "Player 1 is required.");
            if (match.Player2Id == Guid.Empty)
                messageStore.Add(editContext.Field(nameof(match.Player2Id)), "Player 2 is required.");
            if (match.Player1Id == match.Player2Id && match.Player1Id != Guid.Empty)
                messageStore.Add(editContext.Field(nameof(match.Player2Id)), "Player 2 must be different from Player 1.");
        }

        if (match.ServingPlayer == Guid.Empty ||
            (match.ServingPlayer != match.Player1Id && match.ServingPlayer != match.Player2Id))
        {
            messageStore.Add(editContext.Field(nameof(match.ServingPlayer)), "Serving player must be either Player 1 or Player 2.");
        }

        editContext.NotifyValidationStateChanged();
        if (editContext.GetValidationMessages().Any()) return;

        await TennisApiClient.MatchesPOSTAsync(match);

        Navigation.NavigateTo($"/tournaments/{TournamentId}");
    }

    private void Cancel()
    {
        Navigation.NavigateTo($"/tournaments/{TournamentId}");
    }
}
