@page "/tournament/{id:guid}"
@using TennisScoreWebApp.Infrastructure.ExternalServices.TennisScoreApi
@using Microsoft.AspNetCore.Components.Routing
@inject ITennisApiClient TennisApiClient
@inject NavigationManager Navigation

<h3>Tournament Info</h3>

@if (tournament == null)
{
    <p><em>Chargement...</em></p>
}
else
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">@tournament.Name</h5>
            <h6 class="card-subtitle mb-2 text-muted">@tournament.Location</h6>
            <p>@tournament.Description</p>
            <p>
                Dates : @tournament.StartDate.ToString("dd MMM yyyy") 
                - @tournament.EndDate.ToString("dd MMM yyyy")
            </p>
        </div>
    </div>
    @if (tournament.Matches == null || !tournament.Matches.Any())
    {
        <p>Aucun match disponible pour ce tournoi.</p>
    }
    else
    {
        <div class="row">
            @foreach (var match in tournament.Matches)
            {
                <div class="col-md-4 mb-3">
                <NavLink class="card h-100 text-decoration-none text-dark" href="@($"/match/{match.Id}")">
                    <div class="card-body">
                        <h5 class="card-title">@match.Player1LastName vs @match.Player2LastName</h5>
                        <p class="card-text">
                            <strong>Statut :</strong> @match.EndTime <br />
                            <strong>Score :</strong> @match.CurrentScore
                        </p>
                    </div>
                </NavLink>
                </div>
            }
        </div>
    }
}

@code {
    [Parameter] 
    public Guid Id { get; set; }
    private TournamentDto? tournament;

    protected override async Task OnInitializedAsync()
    {
        tournament = await TennisApiClient.TournamentsGETAsync(Id);
    }
}
