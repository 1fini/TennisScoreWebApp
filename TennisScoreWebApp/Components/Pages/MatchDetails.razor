@page "/match/{MatchId:guid}"
@using TennisScoreWebApp.Infrastructure.ExternalServices.TennisScoreApi
@using TennisScoreWebApp.Services
@inject NavigationManager Navigation
@inject ITennisApiClient TennisApiClient
@inject HubService HubService

@rendermode InteractiveServer

<h2 class="mb-4">DÃ©tails du Match</h2>

@if (Match == null)
{
    <p><em>Chargement en cours...</em></p>
}
else
{
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <h3 class="card-title mb-3">@Match.Player1.LastName vs @Match.Player2.LastName</h3>
            <p class="card-text mb-2"><strong>Tournoi :</strong> @Match.TournamentName</p>
            <p class="card-text mb-3"><strong>Date :</strong> @($"{Match.StartTime:dd MMM yyyy}")</p>
            
            <h5>Score par set</h5>
            @if (Match.Sets != null && Match.Sets.Any())
            {
                <table class="table table-striped table-bordered w-auto text-center align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>Joueur</th>
                            <th>Points</th>
                            @for (int i = 0; i < Match.Sets.Count; i++)
                            {
                                <th>Set @(i + 1)</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="text-start fw-bold">
                                @Match.Player1.LastName
                                @if (@Match.ServingPlayerId == @Match.Player1.Id)
                                {
                                    <span title="Au service" class="ms-1">ðŸŽ¾</span>
                                }
                            </td>
                            <td>
                                <span class="badge bg-warning text-dark fs-6 px-3">
                                    @(Match.Player1.CurrentScore ?? "0")
                                </span>
                            </td>
                            @foreach (var set in Match.Sets)
                            {
                                <td>@set.Player1Games</td>
                            }
                        </tr>
                        <tr>
                            <td class="text-start fw-bold">
                                @Match.Player2.LastName
                                @if (@Match.ServingPlayerId == @Match.Player2.Id)
                                {
                                    <span title="Au service" class="ms-1">ðŸŽ¾</span>
                                }
                            </td>
                            <td>
                                <span class="badge bg-warning text-dark fs-6 px-3">
                                    @(Match.Player2.CurrentScore ?? "0")
                                </span>
                            </td>
                            @foreach (var set in Match.Sets)
                            {
                                <td>@set.Player2Games</td>
                            }
                        </tr>
                    </tbody>
                </table>

            }
            else
            {
                <p>Match not started yet.</p>
            }

            <button type="button" class="btn btn-secondary mt-3" @onclick="GoBack">Back to tournament page</button>
        </div>
    </div>
        <!-- Add a point -->
    <h4>Ajouter un point</h4>
    <div class="d-flex flex-wrap gap-2 mb-4">
        @foreach (var player in new[] { Match.Player1, Match.Player2 })
        {
            @foreach (PointType pt in Enum.GetValues(typeof(PointType)))
            {
                @if (pt != PointType.Unknown)
                {
                    <button class="btn @GetPointClass(pt)"
                            @onclick="(() => AddPoint(player.Id, pt))">
                        @player.LastName - @pt
                    </button>
                }
            }
        }
    </div>
}

@code {
    [Parameter] public Guid MatchId { get; set; }
    private MatchDetailsDto? Match { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Match = await TennisApiClient.MatchesGETAsync(MatchId);

        // Connexion au Hub
        await HubService.StartAsync(matchId: MatchId);

        // Abonnement aux updates
        HubService.OnMatchUpdated += UpdateMatch;
    }

    private void UpdateMatch(MatchDetailsDto updatedMatch)
    {
        InvokeAsync(() =>
        {
            if (updatedMatch.Id == Match?.Id)
            {
                Match.Player1.CurrentScore = updatedMatch.Player1.CurrentScore;
                Match.Player2.CurrentScore = updatedMatch.Player2.CurrentScore;
                Match.Sets = updatedMatch.Sets;
                Match.ServingPlayerId = updatedMatch.ServingPlayerId;
                StateHasChanged();
            }
        });
    }

    private string GetPointClass(PointType pt)
        => pt switch
        {
            PointType.Ace => "btn-success",
            PointType.DoubleFault => "btn-danger",
            PointType.Fault => "btn-secondary",
            PointType.Winner => "btn-primary",
            PointType.UnforcedError => "btn-warning",
            PointType.ForcedError => "btn-info",
            PointType.Let => "btn-light",
            PointType.TimeViolation => "btn-dark",
            _ => "btn-secondary"
        };

    private async Task AddPoint(Guid player, PointType pointType)
    {
        if (Match == null) return;

        var addPointRequest = new AddPointRequest
        {
            MatchId = Match.Id,
            WinnerId = player,
            PointType = pointType
        };

        // Appel API pour ajouter le point
        await TennisApiClient.AddPointAsync(addPointRequest);

        // RafraÃ®chir le match et diffuser via SignalR
        var updatedMatch = await TennisApiClient.MatchesGETAsync(Match.Id);
    }
    private void GoBack()
    {
        if (Match?.TournamentId != null)
            Navigation.NavigateTo($"/tournaments/{Match.TournamentId}");
        else
            Navigation.NavigateTo("/tournaments");
    }
}
